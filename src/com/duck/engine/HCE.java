package com.duck.engine;

import com.duck.chess.Board;
import com.duck.chess.Constants;

public class HCE {
    // Material Weights
    // Note: King probably won't matter because both kings always cancel out.
    public static int[] Weights = new int[]{
            95, 330, 355, 480, 980, 4000,
    };

    // The Piece-Square Table
    // Note: Later we will use a separate table for each piece specifically for endgames (i.e. king activity etc.)
    public static int[][] PSQT = new int[][]{
            // @formatter:off
            // Pawn
            {
                      0,  0,  0,  0,  0,  0,  0,  0,   0,0,0,0,0,0,0,0,
                     98,134, 61, 95, 68,126, 34,  0,   0,0,0,0,0,0,0,0,
                     -6,  7, 26, 31, 65, 56, 25,-13,   0,0,0,0,0,0,0,0,
                    -14, 13,  6, 21, 23, 12, 17,-18,   0,0,0,0,0,0,0,0,
                    -18, -1, -5, 12, 17, -1, -2,-21,   0,0,0,0,0,0,0,0,
                    -26, -4, -4,-10,  3,  3, 33,-13,   0,0,0,0,0,0,0,0,
                    -35, -1,-20,-23,-15, 24, 38,-22,   0,0,0,0,0,0,0,0,
                      0,  0,  0,  0,  0,  0,  0,  0,   0,0,0,0,0,0,0,0,
            },
            // Knight
            {
                    -50,-40,-30,-30,-30,-30,-40,-50,   0,0,0,0,0,0,0,0,
                    -73,-41, 72, 36, 23, 62,  7,-17,   0,0,0,0,0,0,0,0,
                    -47, 60, 37, 65, 84,129, 73, 44,   0,0,0,0,0,0,0,0,
                     -9, 17, 19, 53, 37, 69, 18, 22,   0,0,0,0,0,0,0,0,
                    -13,  4, 16, 13, 28, 19, 21, -8,   0,0,0,0,0,0,0,0,
                    -23, -9, 12, 10, 19, 17, 25,-16,   0,0,0,0,0,0,0,0,
                    -29,-53,-12, -3, -1, 18,-14,-19,   0,0,0,0,0,0,0,0,
                    -50,-21,-58,-33,-17,-28,-19,-23,   0,0,0,0,0,0,0,0,
            },
            // Bishop
            {
                    -29,  4,-82,-37,-25,-42,  7, -8,   0,0,0,0,0,0,0,0,
                    -26, 16,-18,-13, 30, 59, 18,-47,   0,0,0,0,0,0,0,0,
                    -16, 37, 43, 40, 35, 50, 37, -2,   0,0,0,0,0,0,0,0,
                     -4,  5, 19, 50, 37, 37,  7, -2,   0,0,0,0,0,0,0,0,
                     -6, 13, 13, 26, 34, 12, 10,  4,   0,0,0,0,0,0,0,0,
                      0, 15, 15, 15, 14, 27, 18, 10,   0,0,0,0,0,0,0,0,
                      4, 15, 16,  0,  7, 21, 33,  1,   0,0,0,0,0,0,0,0,
                    -33, -3,-14,-21,-13,-12,-39,-21,   0,0,0,0,0,0,0,0,
            },
            // Rook
            {
                     32, 42, 32, 51, 63,  9, 31, 43,   0,0,0,0,0,0,0,0,
                     27, 32, 58, 62, 80, 67, 26, 44,   0,0,0,0,0,0,0,0,
                     -5, 19, 26, 36, 17, 45, 61, 16,   0,0,0,0,0,0,0,0,
                    -24,-11,  7, 26, 24, 35, -8,-20,   0,0,0,0,0,0,0,0,
                    -20,-26,-12,  2,  9, -7,  6,-17,   0,0,0,0,0,0,0,0,
                    -45,-25,-16,-17,  3,  0, -5,-33,   0,0,0,0,0,0,0,0,
                    -44,-16,-20, -9, -1, 11, -6,-71,   0,0,0,0,0,0,0,0,
                    -19,-13,  1, 17, 16,  7,-37,-26,   0,0,0,0,0,0,0,0,
            },
            // Queen
            {
                    -28,  0, 29, 12, 59, 44, 43, 45,   0,0,0,0,0,0,0,0,
                    -24,-39, -5,  1,-16, 57, 28, 54,   0,0,0,0,0,0,0,0,
                    -13,-17,  7,  8, 29, 56, 47, 57,   0,0,0,0,0,0,0,0,
                    -27,-27,-16,-16, -1, 17, -2,  1,   0,0,0,0,0,0,0,0,
                     -9,-26, -9,-10, -2, -4,  3, -3,   0,0,0,0,0,0,0,0,
                    -14,  2,-11, -2, -5,  2, 14,  5,   0,0,0,0,0,0,0,0,
                    -35, -8, 11,  2,  8, 15, -3,  1,   0,0,0,0,0,0,0,0,
                     -1,-18, -9, 10,-15,-25,-31,-50,   0,0,0,0,0,0,0,0,
            },
            // King
            {
                    -65, 23, 16,-15,-56,-34,  2, 13,   0,0,0,0,0,0,0,0,
                     29, -1,-20, -7, -8, -4,-38,-29,   0,0,0,0,0,0,0,0,
                     -9, 24,  2,-16,-20,  6, 22,-22,   0,0,0,0,0,0,0,0,
                    -17,-20,-12,-27,-30,-25,-14,-36,   0,0,0,0,0,0,0,0,
                    -49, -1,-27,-39,-46,-44,-33,-51,   0,0,0,0,0,0,0,0,
                    -14,-14,-22,-46,-44,-30,-15,-27,   0,0,0,0,0,0,0,0,
                      1,  7, -8,-64,-43,-16,  9,  8,   0,0,0,0,0,0,0,0,
                    -15, 36, 12,-54,  8,-28, 24, 14,   0,0,0,0,0,0,0,0,
            }
            // @formatter:on
    };

    public static int evaluate(Board board) {
        int mat = 0;
        int psqt = 0;
        int score = 0;

        for (int i = 0; i < 120; i++) {
            if (!Constants.isLegalSquare(i) || board.board[i] == Constants.PIECE_NONE) {
                continue;
            }
            int piece = board.board[i];
            int pt = Constants.pieceTypeOfPiece(piece) - 1;  // -1 for 1-based indexing


            if (Constants.colorOfPiece(piece) == Constants.COLOR_WHITE) {
                mat += Weights[pt];
                psqt += PSQT[pt][i ^ 112];  // flips due to encoding
            } else {
                mat -= Weights[pt];
                psqt -= PSQT[pt][i];  // flip & flip = no flip
            }
        }

        score += mat;
        score += psqt;

        return score;
    }

    public static int evaluateForSTM(Board board) {
        return board.side_to_move == Constants.COLOR_WHITE ? evaluate(board) : -evaluate(board);
    }
}
